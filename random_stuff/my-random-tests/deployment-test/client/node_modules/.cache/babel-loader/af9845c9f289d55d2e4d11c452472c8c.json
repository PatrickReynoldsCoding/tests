{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport Todolist from \"./Todolist\";\nimport React, { useState, useRef, useEffect } from \"react\"; // import { v4 as uuidv4 } from 'uuid';\n// import { BrowserRouter, routes, Route } from \"react-router-dom\";\n// apis\n\nimport { getData } from \"./functions/getData\";\nimport { addTodo } from \"./functions/addTodo\";\nimport { updateChecked } from \"./functions/updatechecked\";\nimport { deleteTodos } from \"./functions/deleteTodos\";\nimport { deleteCompleted } from \"./functions/deleteCompleted\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [todos, setTodos] = useState([]); //object destructoring\n\n  const todoNameRef = useRef();\n\n  const pullTodos = () => {\n    getData() // api function\n    .then(res => setTodos(res)).catch(err => console.log(err));\n  }; // when it first loads it gets the db todos\n\n\n  useEffect(() => {\n    pullTodos();\n  }, []); // this is the dependancy array. it means the function will run everytime the todos array is changed\n  //adds todo from input\n\n  const handleAddTodo = async e => {\n    const message = todoNameRef.current.value;\n    if (message === \"\") return;\n    const newTodo = {\n      message: message,\n      complete: false\n    };\n    setTodos(todos => {\n      return [...todos, newTodo];\n    }); //add newTodo to DB\n\n    addTodo(newTodo); //wipes textbox\n\n    todoNameRef.current.value = null;\n    console.log(todos);\n    pullTodos();\n  }; //update the complete props in the todo via checkbox and upload to db\n\n\n  const toggleComplete = id => {\n    // patch\n    updateChecked(id); //update todos\n\n    pullTodos();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"hello\"\n  }, void 0, false);\n}\n\n_s(App, \"52iFtPgzl31SmfSv7XjBgNY9Iv8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Todolist","React","useState","useRef","useEffect","getData","addTodo","updateChecked","deleteTodos","deleteCompleted","App","todos","setTodos","todoNameRef","pullTodos","then","res","catch","err","console","log","handleAddTodo","e","message","current","value","newTodo","complete","toggleComplete","id"],"sources":["/Users/patrickreynolds/repos/tests/random_stuff/deploytests/deployment-test/client/src/App.js"],"sourcesContent":["import Todolist from \"./Todolist\";\nimport React, { useState, useRef, useEffect } from \"react\";\n// import { v4 as uuidv4 } from 'uuid';\n// import { BrowserRouter, routes, Route } from \"react-router-dom\";\n\n// apis\nimport { getData } from \"./functions/getData\";\nimport { addTodo } from \"./functions/addTodo\";\nimport { updateChecked } from \"./functions/updatechecked\";\nimport { deleteTodos } from \"./functions/deleteTodos\";\nimport { deleteCompleted } from \"./functions/deleteCompleted\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]); //object destructoring\n  const todoNameRef = useRef();\n\n  \n  const pullTodos = () => {\n    getData() // api function\n      .then((res) => setTodos(res))\n      .catch((err) => console.log(err));\n  }\n\n  // when it first loads it gets the db todos\n  useEffect(() => {\n    pullTodos();\n  }, []); // this is the dependancy array. it means the function will run everytime the todos array is changed\n  \n  \n\n\n  //adds todo from input\n  const handleAddTodo = async (e) => {\n    const message = todoNameRef.current.value;\n    if (message === \"\") return;\n    const newTodo = { message: message, complete: false };\n    setTodos((todos) => {\n      return [...todos, newTodo];\n    });\n    //add newTodo to DB\n    addTodo(newTodo);\n    //wipes textbox\n    todoNameRef.current.value = null; \n    \n    console.log(todos);\n    pullTodos()\n    \n  };\n\n  //update the complete props in the todo via checkbox and upload to db\n  const toggleComplete = (id) => {\n    // patch\n    updateChecked(id);\n    //update todos\n    pullTodos()\n  };\n\n\n  return (\n    <>\n      hello\n      {/* <Todolist todos={todos} toggleComplete={toggleComplete}/>\n      <input ref={todoNameRef} type=\"text\" />\n      <button onClick={handleAddTodo}>Add Todo</button>\n      <button onClick={() => {deleteCompleted(); pullTodos();}}>Clear Complete</button>\n      <button onClick={() => {deleteTodos(); pullTodos();}}>Delete all!!!</button>\n      <div> {todos.filter(value => value.complete === !true).length} left to do </div> */}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD,C,CACA;AACA;AAEA;;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,eAAT,QAAgC,6BAAhC;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC,CADa,CAC2B;;EACxC,MAAMW,WAAW,GAAGV,MAAM,EAA1B;;EAGA,MAAMW,SAAS,GAAG,MAAM;IACtBT,OAAO,GAAG;IAAH,CACJU,IADH,CACSC,GAAD,IAASJ,QAAQ,CAACI,GAAD,CADzB,EAEGC,KAFH,CAEUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB;EAGD,CAJD,CALa,CAWb;;;EACAd,SAAS,CAAC,MAAM;IACdU,SAAS;EACV,CAFQ,EAEN,EAFM,CAAT,CAZa,CAcL;EAKR;;EACA,MAAMO,aAAa,GAAG,MAAOC,CAAP,IAAa;IACjC,MAAMC,OAAO,GAAGV,WAAW,CAACW,OAAZ,CAAoBC,KAApC;IACA,IAAIF,OAAO,KAAK,EAAhB,EAAoB;IACpB,MAAMG,OAAO,GAAG;MAAEH,OAAO,EAAEA,OAAX;MAAoBI,QAAQ,EAAE;IAA9B,CAAhB;IACAf,QAAQ,CAAED,KAAD,IAAW;MAClB,OAAO,CAAC,GAAGA,KAAJ,EAAWe,OAAX,CAAP;IACD,CAFO,CAAR,CAJiC,CAOjC;;IACApB,OAAO,CAACoB,OAAD,CAAP,CARiC,CASjC;;IACAb,WAAW,CAACW,OAAZ,CAAoBC,KAApB,GAA4B,IAA5B;IAEAN,OAAO,CAACC,GAAR,CAAYT,KAAZ;IACAG,SAAS;EAEV,CAfD,CApBa,CAqCb;;;EACA,MAAMc,cAAc,GAAIC,EAAD,IAAQ;IAC7B;IACAtB,aAAa,CAACsB,EAAD,CAAb,CAF6B,CAG7B;;IACAf,SAAS;EACV,CALD;;EAQA,oBACE;IAAA;EAAA,iBADF;AAWD;;GAzDQJ,G;;KAAAA,G;AA2DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}